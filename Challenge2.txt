A. Pizza Metrics
1. How many pizzas were ordered?
select count(*) as pizza_order from customer_orders
2. How many unique customer orders were made?
select count(distinct order_id) as unique_customer_orders  from customer_orders
3. How many successful orders were delivered by each runner?
select runner_id, count(runner_id) as successful_orders from runner_orders where distance != 0 group by runner_id 
4. How many of each type of pizza was delivered?
SELECT pizza_id, count(pizza_id) as orders FROM pizza_runner.customer_orders group by pizza_id;
5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT  customer_id , count(customer_orders.pizza_id) as orders, pizza_name as orders FROM pizza_runner.customer_orders 
join pizza_names on customer_orders.pizza_id = pizza_names.pizza_id group by customer_orders.pizza_id, pizza_name, customer_id;
6. What was the maximum number of pizzas delivered in a single order?
select customer_orders.order_id, count(customer_orders.order_id) as orders from customer_orders join runner_orders on customer_orders.order_id = runner_orders.order_id where distance !=0  group by customer_orders.order_id
7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
select c.customer_id, sum(case when c.exclusions <> '' or c.extras <> '' then 1 else 0 end) as al_one_change , 
sum(case when c.exclusions = '' and c.extras = '' then 1 else 0 end) as no_change
from customer_orders_temp as c join runner_orders_temp as r on c.order_id = r.order_id
where r.distance !=0 
group by customer_id
8. How many pizzas were delivered that had both exclusions and extras?
select sum(case when exclusions is not null and extras is not null then 1 else 0 end) as result from customer_orders as c
join runner_orders as r on c.order_id = r.order_id where r.distance >= 1 and c.exclusions <> ' ' and c.extras <> ' '
9. What was the total volume of pizzas ordered for each hour of the day?
SELECT count(order_id),  hour(order_time) as date_hour FROM pizza_runner.customer_orders group by date_hour order by date_hour;
10. What was the volume of orders for each day of the week?
SELECT 
    COUNT(order_id) AS order_count,
    ELT(DAYOFWEEK(order_time + Interval 1 day), 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday','Sunday') AS date_order
FROM 
    pizza_runner.customer_orders
GROUP BY 
    date_order
order by order_count desc

B. Runner and Customer Experience
1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
SELECT week(registration_date, 1) as week, count(runner_id) as register_num FROM pizza_runner.runners group by week
2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
select runner_id, avg(avg_time) from (select runner_id, avg(timestampdiff(minute, order_time, pickup_time)) as avg_time from runner_orders join customer_orders 
on runner_orders.order_id = customer_orders.order_id where distance > 0 group by runner_id, customer_orders.order_id) as cte_order group by runner_id
3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
select pizza_id, avg(timestampdiff(minute, order_time,  pickup_time)) from customer_orders inner join runner_orders_temp on customer_orders.order_id = runner_orders_temp.order_id where distance > 0 group by pizza_id
4. What was the average distance travelled for each customer?
select customer_id, avg(distance) from customer_orders inner join runner_orders_temp on customer_orders.order_id = runner_orders_temp.order_id where distance > 0
group by customer_id
5. What was the difference between the longest and shortest delivery times for all orders?
select max(duration) - min(duration) as difference from customer_orders inner join runner_orders_temp on customer_orders.order_id = runner_orders_temp.order_id where distance > 0
6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
select runner_id, customer_id, pizza_id, customer_orders.order_id, ROUND((distance/duration * 60), 2) AS avg_speed from customer_orders inner join runner_orders_temp on customer_orders.order_id = runner_orders_temp.order_id where distance > 0
7. What is the successful delivery percentage for each runner?
select runner_id, 100 * sum(case when distance = 0 then 0 else 1 end) / count(*) from runner_orders
group by runner_id

C. Ingredient Optimisation
1. What are the standard ingredients for each pizza?
2. What was the most commonly added extra?
3. What was the most common exclusion?
4. Generate an order item for each record in the customers_orders table in the format of one of the following:
Meat Lovers
Meat Lovers - Exclude Beef
Meat Lovers - Extra Bacon
Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
SELECT 
	CONCAT(pizza_names.pizza_name, 
		IF(exclusions NOT IN ('null','') AND exclusions IS NOT NULL, 
			CONCAT(' - Exclude ', 
				(SELECT GROUP_CONCAT(topping_name separator  ', ')
				FROM pizza_toppings
				WHERE FIND_IN_SET(topping_id,REPLACE(exclusions,' ','')) != 0
				GROUP BY pizza_names.pizza_name
				)
			)
        , ''), 	
        IF(extras NOT IN ('null','') AND extras IS NOT NULL, 
			CONCAT(' - Extra ', 
				(SELECT GROUP_CONCAT(topping_name separator  ', ')
				FROM pizza_toppings
				WHERE FIND_IN_SET(topping_id,REPLACE(extras,' ','')) != 0
				GROUP BY pizza_names.pizza_name
				)
            )
        , '')) AS order_item
FROM customer_orders
JOIN pizza_names ON customer_orders.pizza_id = pizza_names.pizza_id
5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?

D. Pricing and Ratings
1. If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes - how much money has Pizza Runner made so far if there are no delivery fees?
SELECT sum( 
       (CASE 
            WHEN pizza_id = 1 THEN 10 
            ELSE 12 
        END)) as revenue
FROM pizza_runner.customer_orders;
2. What if there was an additional $1 charge for any pizza extras?
Add cheese is $1 extra
select sum(revenue)+ sum(total_revenue)  + sum(total_extras) as total from (SELECT 
       (CASE 
            WHEN pizza_id = 1 THEN 10 
            ELSE 12 
        END) AS revenue,
       (CASE 
            WHEN LENGTH(exclusions) = 1 THEN pizza_id  = 1
            WHEN LENGTH(exclusions) > 1 THEN pizza_id  = 2
            ELSE pizza_id  = 0
        END) AS total_revenue,
        (CASE 
             WHEN LENGTH(extras) = 1 THEN pizza_id  = 1
            WHEN LENGTH(extras) > 1 THEN pizza_id  = 2
            ELSE pizza_id  = 0
        END) AS total_extras
FROM pizza_runner.customer_orders_temp) as cte_table

3. The Pizza Runner team now wants to add an additional ratings system that allows customers to rate their runner, how would you design an additional table for this new dataset - generate a schema for this new table and insert your own data for ratings for each successful customer order between 1 to 5.
CREATE TABLE Rating (
    rating_id int,
    order_id INT,
    rating INT CHECK (rating >= 1 AND rating <= 5)
);
4. Using your newly generated table - can you join all of the information together to form a table which has the following information for successful deliveries?
customer_id
order_id
runner_id
rating
order_time
pickup_time
Time between order and pickup
Delivery duration
Average speed
Total number of pizzas

SELECT customer_id, customer_orders.order_id, runner_id, rating, order_time, pickup_time, timestampdiff(minute, order_time, pickup_time) as time_diff, duration, (distance*60/duration) as avg_speed FROM pizza_runner.customer_orders join runner_orders_temp on customer_orders.order_id = runner_orders_temp.order_id join rating on customer_orders.order_id = rating.order_id;

5. If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each runner is paid $0.30 per kilometre traveled - how much money does Pizza Runner have left over after these deliveries?
select sum(revenue - fee) as profit from( SELECT distance * 0.3 as fee, (CASE WHEN pizza_id = 1 THEN 10 ELSE 12 END) as revenue 
FROM pizza_runner.customer_orders join runner_orders_temp on customer_orders.order_id = runner_orders_temp.order_id where distance > 0) as cte_table


